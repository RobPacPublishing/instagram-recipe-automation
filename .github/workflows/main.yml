name: Generate Recipe Images
on:
  schedule:
    # Esegui ogni giorno alle 11:00 UTC
    - cron: '0 11 * * *'
  # Consente l'esecuzione manuale dal tab Actions
  workflow_dispatch:
jobs:
  generate-images:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Create package.json
        run: |
          echo '{
            "name": "instagram-recipe-automation",
            "version": "1.0.0",
            "description": "Automation for Instagram recipes",
            "dependencies": {
              "dotenv": "^16.0.0",
              "canvas": "^2.9.0",
              "cloudinary": "^1.37.3",
              "node-fetch": "^2.6.12",
              "mammoth": "^1.6.0",
              "pdf-parse": "^1.1.1"
            }
          }' > package.json
      
      - name: Install dependencies
        run: npm install
      
      - name: Install canvas dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev libjpeg-dev libpango1.0-dev libgif-dev build-essential g++
      
      - name: Create and execute image generator
        run: |
          mkdir -p src/image
          echo 'const fs = require("fs");
          const path = require("path");
          const { createCanvas } = require("canvas");

          // Configura i percorsi
          const dataDir = path.join(__dirname, "../../data");
          const imagesDir = path.join(dataDir, "images");
          const WIDTH = 1080;
          const HEIGHT = 1080;

          // Crea le directory
          if (!fs.existsSync(dataDir)) {
            fs.mkdirSync(dataDir, { recursive: true });
          }
          if (!fs.existsSync(imagesDir)) {
            fs.mkdirSync(imagesDir, { recursive: true });
          }

          // Esempio di ricette
          const sampleRecipes = [
            {
              title: "Pasta al Pomodoro",
              ingredients: ["400g pasta", "300g pomodori", "2 spicchi d\'aglio", "Basilico fresco", "Olio d\'oliva"]
            },
            {
              title: "Risotto ai Funghi",
              ingredients: ["320g riso per risotti", "250g funghi", "Cipolla", "Brodo vegetale", "Parmigiano"]
            },
            {
              title: "Insalata di Quinoa",
              ingredients: ["200g quinoa", "Pomodorini", "Cetrioli", "Avocado", "Succo di limone"]
            }
          ];

          // Genera le immagini
          console.log("Generazione immagini...");
          
          for (let i = 0; i < sampleRecipes.length; i++) {
            const recipe = sampleRecipes[i];
            console.log(`Generazione immagine per "${recipe.title}"`);
            
            const canvas = createCanvas(WIDTH, HEIGHT);
            const ctx = canvas.getContext("2d");
            
            // Sfondo
            ctx.fillStyle = "#F5F5DC";
            ctx.fillRect(0, 0, WIDTH, HEIGHT);
            
            // Bordo
            ctx.strokeStyle = "#8B4513";
            ctx.lineWidth = 20;
            ctx.strokeRect(20, 20, WIDTH - 40, HEIGHT - 40);
            
            // Titolo
            ctx.fillStyle = "#8B4513";
            ctx.font = "bold 60px Arial";
            ctx.textAlign = "center";
            ctx.fillText(recipe.title, WIDTH / 2, 200);
            
            // Ingredienti
            ctx.font = "40px Arial";
            ctx.fillText("Ingredienti", WIDTH / 2, 300);
            
            ctx.font = "30px Arial";
            ctx.textAlign = "left";
            for (let j = 0; j < recipe.ingredients.length; j++) {
              ctx.fillText(`â€¢ ${recipe.ingredients[j]}`, 200, 350 + j * 50);
            }
            
            // Footer
            ctx.textAlign = "center";
            ctx.font = "italic 30px Arial";
            ctx.fillText("Visita il nostro profilo per la ricetta completa!", WIDTH / 2, HEIGHT - 100);
            
            // Salva l\'immagine
            const outputPath = path.join(imagesDir, `recipe-${i+1}.png`);
            const buffer = canvas.toBuffer("image/png");
            fs.writeFileSync(outputPath, buffer);
            console.log(`Immagine salvata: ${outputPath}`);
          }
          
          console.log("Generazione completata!");' > src/image/generator.js
          
          node src/image/generator.js
      
      - name: Upload generated files
        uses: actions/upload-artifact@master
        with:
          name: generated-recipe-images
          path: data/images/
