name: Extract Recipes and Generate Images
on:
  schedule:
    # Esegui ogni giorno alle 11:00 UTC
    - cron: '0 11 * * *'
  # Consente l'esecuzione manuale dal tab Actions
  workflow_dispatch:
jobs:
  extract-and-generate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Create package.json
        run: |
          echo '{
            "name": "instagram-recipe-automation",
            "version": "1.0.0",
            "description": "Automation for Instagram recipes",
            "dependencies": {
              "dotenv": "^16.0.0",
              "canvas": "^2.9.0",
              "mammoth": "^1.6.0",
              "pdf-parse": "^1.1.1"
            }
          }' > package.json
      
      - name: Install dependencies
        run: npm install
      
      - name: Install canvas dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev libjpeg-dev libpango1.0-dev libgif-dev build-essential g++
      
      - name: Create directories
        run: mkdir -p data/images
      
      - name: Upload example file
        uses: actions/upload-artifact@master
        with:
          name: example-recipe-file
          path: mocktail.docx
          if-no-files-found: ignore
      
      - name: Create recipe extractor and image generator
        run: |
          cat > recipe-extractor.js << 'EOL'
          const fs = require('fs');
          const path = require('path');
          const mammoth = require('mammoth');
          
          // Configurazioni
          const DATA_DIR = 'data';
          const RECIPES_FILE = path.join(DATA_DIR, 'recipes.json');
          
          // Ricette di esempio (usate se non Ã¨ possibile estrarre dal file)
          const sampleRecipes = [
            {
              title: "Mocktail Tropicale",
              ingredients: [
                "100ml di succo d'ananas",
                "50ml di succo d'arancia",
                "30ml di sciroppo di cocco",
                "15ml di succo di lime",
                "Ghiaccio tritato",
                "Fettina d'ananas per guarnire"
              ],
              instructions: [
                "Versare tutti gli ingredienti in uno shaker con ghiaccio",
                "Agitare energicamente per 10 secondi",
                "Filtrare in un bicchiere con ghiaccio fresco",
                "Guarnire con una fettina d'ananas"
              ],
              prepTime: "5 minuti",
              servings: "1 persona"
            },
            {
              title: "Sunrise Mocktail",
              ingredients: [
                "100ml di succo d'arancia",
                "50ml di succo di mirtillo rosso",
                "20ml di sciroppo di granatina",
                "Acqua tonica",
                "Ghiaccio",
                "Fettina d'arancia per guarnire"
              ],
              instructions: [
                "Riempire un bicchiere alto con ghiaccio",
                "Versare il succo d'arancia",
                "Aggiungere il succo di mirtillo",
                "Far scivolare lentamente la granatina sul bordo",
                "Completare con acqua tonica",
                "Guarnire con una fettina d'arancia"
              ],
              prepTime: "5 minuti",
              servings: "1 persona"
            }
          ];
          
          /**
           * Estrae ricette da un testo
           */
          function extractRecipesFromText(text) {
            console.log('Analisi del testo...');
            const recipes = [];
            
            // Dividi il testo in sezioni
            const sections = text.split(/\n\s*\n/);
            console.log(`Trovate ${sections.length} sezioni di testo`);
            
            // Pattern per identificare ricette
            let currentRecipe = null;
            let inIngredients = false;
            let inInstructions = false;
            
            for (const section of sections) {
              // Cerca titoli di ricette
              const titleMatch = section.match(/^([A-Z][A-Za-z0-9\s]+)$/m);
              if (titleMatch && titleMatch[1].length < 50) {
                // Nuovo titolo trovato, salva ricetta precedente
                if (currentRecipe) {
                  recipes.push(currentRecipe);
                }
                
                // Inizia nuova ricetta
                currentRecipe = {
                  title: titleMatch[1].trim(),
                  ingredients: [],
                  instructions: [],
                  prepTime: '',
                  servings: ''
                };
                
                continue;
              }
              
              // Se non abbiamo una ricetta attuale, salta
              if (!currentRecipe) continue;
              
              // Cerca sezione ingredienti
              if (section.toLowerCase().includes('ingredienti:')) {
                inIngredients = true;
                inInstructions = false;
                
                // Estrai ingredienti
                const ingredientLines = section.split('\n');
                for (const line of ingredientLines) {
                  const cleanLine = line.trim();
                  if (cleanLine && !cleanLine.toLowerCase().includes('ingredienti:')) {
                    currentRecipe.ingredients.push(cleanLine);
                  }
                }
                continue;
              }
              
              // Cerca sezione istruzioni/preparazione
              if (section.toLowerCase().includes('preparazione:') || 
                  section.toLowerCase().includes('istruzioni:') ||
                  section.toLowerCase().includes('procedimento:')) {
                inIngredients = false;
                inInstructions = true;
                
                // Estrai istruzioni
                const instructionLines = section.split('\n');
                for (const line of instructionLines) {
                  const cleanLine = line.trim();
                  if (cleanLine && 
                      !cleanLine.toLowerCase().includes('preparazione:') &&
                      !cleanLine.toLowerCase().includes('istruzioni:') &&
                      !cleanLine.toLowerCase().includes('procedimento:')) {
                    currentRecipe.instructions.push(cleanLine);
                  }
                }
                continue;
              }
              
              // Cerca tempo di preparazione
              if (section.toLowerCase().includes('tempo di preparazione')) {
                const prepTimeMatch = section.match(/tempo di preparazione[:\s]+([^\n]+)/i);
                if (prepTimeMatch) {
                  currentRecipe.prepTime = prepTimeMatch[1].trim();
                }
              }
              
              // Cerca porzioni
              if (section.toLowerCase().includes('porzioni') || section.toLowerCase().includes('dosi per')) {
                const servingsMatch = section.match(/(?:porzioni|dosi per)[:\s]+([^\n]+)/i);
                if (servingsMatch) {
                  currentRecipe.servings = servingsMatch[1].trim();
                }
              }
            }
            
            // Aggiungi ultima ricetta se esiste
            if (currentRecipe) {
              recipes.push(currentRecipe);
            }
            
            console.log(`Estratte ${recipes.length} ricette`);
            return recipes;
          }
          
          /**
           * Estrae il testo da un file DOCX
           */
          async function extractTextFromDocx(filePath) {
            try {
              console.log(`Estrazione del testo da: ${filePath}`);
              const result = await mammoth.extractRawText({ path: filePath });
              console.log(`Testo estratto: ${result.value.length} caratteri`);
              return result.value;
            } catch (error) {
              console.error('Errore nell\'estrazione del testo:', error);
              return '';
            }
          }
          
          /**
           * Funzione principale
           */
          async function main() {
            try {
              let recipes = [];
              
              // Prova a trovare il file DOCX/PDF
              const filePath = 'mocktail.docx';
              if (fs.existsSync(filePath)) {
                // Estrai il testo dal file
                const text = await extractTextFromDocx(filePath);
                
                // Estrai le ricette dal testo
                if (text) {
                  recipes = extractRecipesFromText(text);
                }
              }
              
              // Se non abbiamo trovato ricette, usa gli esempi
              if (recipes.length === 0) {
                console.log('Nessuna ricetta trovata, utilizzo degli esempi');
                recipes = sampleRecipes;
              }
              
              // Salva le ricette
              if (!fs.existsSync(DATA_DIR)) {
                fs.mkdirSync(DATA_DIR, { recursive: true });
              }
              
              fs.writeFileSync(RECIPES_FILE, JSON.stringify(recipes, null, 2));
              console.log(`Ricette salvate in: ${RECIPES_FILE}`);
              
              return recipes;
            } catch (error) {
              console.error('Errore:', error);
              return sampleRecipes;
            }
          }
          
          // Esegui lo script
          main();
          EOL
          
          cat > image-generator.js << 'EOL'
          const fs = require('fs');
          const { createCanvas } = require('canvas');
          const path = require('path');
          
          // Configurazione
          const WIDTH = 1080;
          const HEIGHT = 1080;
          const DATA_DIR = 'data';
          const IMAGES_DIR = path.join(DATA_DIR, 'images');
          const RECIPES_FILE = path.join(DATA_DIR, 'recipes.json');
          
          // Assicurati che la directory per le immagini esista
          if (!fs.existsSync(IMAGES_DIR)) {
            fs.mkdirSync(IMAGES_DIR, { recursive: true });
          }
          
          /**
           * Genera un'immagine per una ricetta
           */
          function generateRecipeImage(recipe, outputPath) {
            const canvas = createCanvas(WIDTH, HEIGHT);
            const ctx = canvas.getContext('2d');
            
            // Sfondo
            ctx.fillStyle = '#F5F5DC'; // Beige chiaro
            ctx.fillRect(0, 0, WIDTH, HEIGHT);
            
            // Barra superiore
            ctx.fillStyle = '#8B4513'; // Marrone
            ctx.fillRect(0, 0, WIDTH, 160);
            
            // Titolo
            ctx.fillStyle = '#FFFFFF'; // Bianco
            ctx.font = 'bold 60px Arial';
            ctx.textAlign = 'center';
            
            // Gestione titoli lunghi
            const title = recipe.title;
            if (title.length > 25) {
              const words = title.split(' ');
              let line = '';
              let y = 70;
              
              for (const word of words) {
                const testLine = line + word + ' ';
                if (ctx.measureText(testLine).width > WIDTH - 100) {
                  ctx.fillText(line, WIDTH/2, y);
                  line = word + ' ';
                  y += 50;
                } else {
                  line = testLine;
                }
              }
              ctx.fillText(line, WIDTH/2, y);
            } else {
              ctx.fillText(title, WIDTH/2, 100);
            }
            
            // Informazioni rapide
            ctx.fillStyle = '#8B4513'; // Marrone
            ctx.font = 'italic 30px Arial';
            ctx.textAlign = 'center';
            let infoText = '';
            if (recipe.prepTime) infoText += `Prep: ${recipe.prepTime} `;
            if (recipe.cookTime) infoText += `| Cottura: ${recipe.cookTime} `;
            if (recipe.servings) infoText += `| Porzioni: ${recipe.servings}`;
            ctx.fillText(infoText, WIDTH/2, 200);
            
            // Bordo decorativo
            ctx.strokeStyle = '#8B4513'; // Marrone
            ctx.lineWidth = 5;
            ctx.strokeRect(40, 240, WIDTH - 80, HEIGHT - 280);
            
            // Titolo ingredienti
            ctx.fillStyle = '#8B4513'; // Marrone
            ctx.font = 'bold 40px Arial';
            ctx.textAlign = 'left';
            ctx.fillText('Ingredienti:', 80, 290);
            
            // Lista ingredienti
            ctx.font = '30px Arial';
            let ingredientY = 340;
            const ingredients = recipe.ingredients || [];
            const maxIngredients = Math.min(8, ingredients.length);
            for (let i = 0; i < maxIngredients; i++) {
              ctx.fillText(`â¢ ${ingredients[i]}`, 80, ingredientY);
              ingredientY += 45;
            }
            
            // Se ci sono piÃ¹ ingredienti
            if (ingredients.length > maxIngredients) {
              ctx.fillText('â¢ ...', 80, ingredientY);
            }
            
            // Footer
            ctx.textAlign = 'center';
            ctx.font = 'bold 40px Arial';
            ctx.fillStyle = '#8B4513'; // Marrone
            ctx.fillText('Visita il nostro profilo', WIDTH/2, HEIGHT - 100);
            ctx.font = '35px Arial';
            ctx.fillText('per la ricetta completa!', WIDTH/2, HEIGHT - 50);
            
            // Salva l'immagine
            const buffer = canvas.toBuffer('image/png');
            fs.writeFileSync(outputPath, buffer);
            
            console.log(`Immagine creata: ${outputPath}`);
          }
          
          /**
           * Funzione principale
           */
          async function main() {
            try {
              // Carica le ricette
              let recipes = [];
              if (fs.existsSync(RECIPES_FILE)) {
                const data = fs.readFileSync(RECIPES_FILE, 'utf8');
                recipes = JSON.parse(data);
                console.log(`Caricate ${recipes.length} ricette`);
              } else {
                console.log('File ricette non trovato');
                return;
              }
              
              // Genera immagini
              console.log(`Generazione di ${recipes.length} immagini...`);
              
              const recipeImages = [];
              for (let i = 0; i < recipes.length; i++) {
                const recipe = recipes[i];
                const outputPath = path.join(IMAGES_DIR, `recipe-${i+1}.png`);
                
                generateRecipeImage(recipe, outputPath);
                
                recipeImages.push({
                  id: i + 1,
                  title: recipe.title,
                  imagePath: outputPath
                });
              }
              
              // Salva info
              fs.writeFileSync(path.join(DATA_DIR, 'recipe-images.json'), JSON.stringify(recipeImages, null, 2));
              console.log('Immagini generate con successo!');
            } catch (error) {
              console.error('Errore:', error);
            }
          }
          
          // Esegui
          main();
          EOL
          
          # Esegui gli script in sequenza
          node recipe-extractor.js
          node image-generator.js
      
      - name: Upload generated files
        uses: actions/upload-artifact@master
        with:
          name: generated-recipe-images
          path: data/images/
      
      - name: Upload extracted recipes
        uses: actions/upload-artifact@master
        with:
          name: extracted-recipes
          path: data/recipes.json
